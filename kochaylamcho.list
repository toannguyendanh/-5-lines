
kochaylamcho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003184  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003290  08003290  00013290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032b4  080032b4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080032b4  080032b4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032b4  080032b4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080032bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000018  080032d4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080032d4  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008050  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001502  00000000  00000000  00028091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00029598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  00029f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165d1  00000000  00000000  0002a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e6  00000000  00000000  00040db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008419c  00000000  00000000  0004a497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  000ce684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003278 	.word	0x08003278

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003278 	.word	0x08003278

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_fmul>:
 80003a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a8:	bf1e      	ittt	ne
 80003aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ae:	ea92 0f0c 	teqne	r2, ip
 80003b2:	ea93 0f0c 	teqne	r3, ip
 80003b6:	d06f      	beq.n	8000498 <__aeabi_fmul+0xf8>
 80003b8:	441a      	add	r2, r3
 80003ba:	ea80 0c01 	eor.w	ip, r0, r1
 80003be:	0240      	lsls	r0, r0, #9
 80003c0:	bf18      	it	ne
 80003c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003c6:	d01e      	beq.n	8000406 <__aeabi_fmul+0x66>
 80003c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d4:	fba0 3101 	umull	r3, r1, r0, r1
 80003d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e0:	bf3e      	ittt	cc
 80003e2:	0049      	lslcc	r1, r1, #1
 80003e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e8:	005b      	lslcc	r3, r3, #1
 80003ea:	ea40 0001 	orr.w	r0, r0, r1
 80003ee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f2:	2afd      	cmp	r2, #253	; 0xfd
 80003f4:	d81d      	bhi.n	8000432 <__aeabi_fmul+0x92>
 80003f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fe:	bf08      	it	eq
 8000400:	f020 0001 	biceq.w	r0, r0, #1
 8000404:	4770      	bx	lr
 8000406:	f090 0f00 	teq	r0, #0
 800040a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800040e:	bf08      	it	eq
 8000410:	0249      	lsleq	r1, r1, #9
 8000412:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000416:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041a:	3a7f      	subs	r2, #127	; 0x7f
 800041c:	bfc2      	ittt	gt
 800041e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000422:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000426:	4770      	bxgt	lr
 8000428:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	3a01      	subs	r2, #1
 8000432:	dc5d      	bgt.n	80004f0 <__aeabi_fmul+0x150>
 8000434:	f112 0f19 	cmn.w	r2, #25
 8000438:	bfdc      	itt	le
 800043a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800043e:	4770      	bxle	lr
 8000440:	f1c2 0200 	rsb	r2, r2, #0
 8000444:	0041      	lsls	r1, r0, #1
 8000446:	fa21 f102 	lsr.w	r1, r1, r2
 800044a:	f1c2 0220 	rsb	r2, r2, #32
 800044e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000452:	ea5f 0031 	movs.w	r0, r1, rrx
 8000456:	f140 0000 	adc.w	r0, r0, #0
 800045a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800045e:	bf08      	it	eq
 8000460:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000464:	4770      	bx	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800046e:	bf02      	ittt	eq
 8000470:	0040      	lsleq	r0, r0, #1
 8000472:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000476:	3a01      	subeq	r2, #1
 8000478:	d0f9      	beq.n	800046e <__aeabi_fmul+0xce>
 800047a:	ea40 000c 	orr.w	r0, r0, ip
 800047e:	f093 0f00 	teq	r3, #0
 8000482:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000486:	bf02      	ittt	eq
 8000488:	0049      	lsleq	r1, r1, #1
 800048a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800048e:	3b01      	subeq	r3, #1
 8000490:	d0f9      	beq.n	8000486 <__aeabi_fmul+0xe6>
 8000492:	ea41 010c 	orr.w	r1, r1, ip
 8000496:	e78f      	b.n	80003b8 <__aeabi_fmul+0x18>
 8000498:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	bf18      	it	ne
 80004a2:	ea93 0f0c 	teqne	r3, ip
 80004a6:	d00a      	beq.n	80004be <__aeabi_fmul+0x11e>
 80004a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004ac:	bf18      	it	ne
 80004ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b2:	d1d8      	bne.n	8000466 <__aeabi_fmul+0xc6>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f090 0f00 	teq	r0, #0
 80004c2:	bf17      	itett	ne
 80004c4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c8:	4608      	moveq	r0, r1
 80004ca:	f091 0f00 	teqne	r1, #0
 80004ce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d2:	d014      	beq.n	80004fe <__aeabi_fmul+0x15e>
 80004d4:	ea92 0f0c 	teq	r2, ip
 80004d8:	d101      	bne.n	80004de <__aeabi_fmul+0x13e>
 80004da:	0242      	lsls	r2, r0, #9
 80004dc:	d10f      	bne.n	80004fe <__aeabi_fmul+0x15e>
 80004de:	ea93 0f0c 	teq	r3, ip
 80004e2:	d103      	bne.n	80004ec <__aeabi_fmul+0x14c>
 80004e4:	024b      	lsls	r3, r1, #9
 80004e6:	bf18      	it	ne
 80004e8:	4608      	movne	r0, r1
 80004ea:	d108      	bne.n	80004fe <__aeabi_fmul+0x15e>
 80004ec:	ea80 0001 	eor.w	r0, r0, r1
 80004f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fc:	4770      	bx	lr
 80004fe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000502:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000506:	4770      	bx	lr

08000508 <__aeabi_drsub>:
 8000508:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e002      	b.n	8000514 <__adddf3>
 800050e:	bf00      	nop

08000510 <__aeabi_dsub>:
 8000510:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000514 <__adddf3>:
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051e:	ea94 0f05 	teq	r4, r5
 8000522:	bf08      	it	eq
 8000524:	ea90 0f02 	teqeq	r0, r2
 8000528:	bf1f      	itttt	ne
 800052a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000532:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000536:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053a:	f000 80e2 	beq.w	8000702 <__adddf3+0x1ee>
 800053e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000542:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000546:	bfb8      	it	lt
 8000548:	426d      	neglt	r5, r5
 800054a:	dd0c      	ble.n	8000566 <__adddf3+0x52>
 800054c:	442c      	add	r4, r5
 800054e:	ea80 0202 	eor.w	r2, r0, r2
 8000552:	ea81 0303 	eor.w	r3, r1, r3
 8000556:	ea82 0000 	eor.w	r0, r2, r0
 800055a:	ea83 0101 	eor.w	r1, r3, r1
 800055e:	ea80 0202 	eor.w	r2, r0, r2
 8000562:	ea81 0303 	eor.w	r3, r1, r3
 8000566:	2d36      	cmp	r5, #54	; 0x36
 8000568:	bf88      	it	hi
 800056a:	bd30      	pophi	{r4, r5, pc}
 800056c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000570:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000574:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000578:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x70>
 800057e:	4240      	negs	r0, r0
 8000580:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000584:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000588:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800058c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x84>
 8000592:	4252      	negs	r2, r2
 8000594:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000598:	ea94 0f05 	teq	r4, r5
 800059c:	f000 80a7 	beq.w	80006ee <__adddf3+0x1da>
 80005a0:	f1a4 0401 	sub.w	r4, r4, #1
 80005a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a8:	db0d      	blt.n	80005c6 <__adddf3+0xb2>
 80005aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ae:	fa22 f205 	lsr.w	r2, r2, r5
 80005b2:	1880      	adds	r0, r0, r2
 80005b4:	f141 0100 	adc.w	r1, r1, #0
 80005b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80005bc:	1880      	adds	r0, r0, r2
 80005be:	fa43 f305 	asr.w	r3, r3, r5
 80005c2:	4159      	adcs	r1, r3
 80005c4:	e00e      	b.n	80005e4 <__adddf3+0xd0>
 80005c6:	f1a5 0520 	sub.w	r5, r5, #32
 80005ca:	f10e 0e20 	add.w	lr, lr, #32
 80005ce:	2a01      	cmp	r2, #1
 80005d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d4:	bf28      	it	cs
 80005d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	18c0      	adds	r0, r0, r3
 80005e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	d507      	bpl.n	80005fa <__adddf3+0xe6>
 80005ea:	f04f 0e00 	mov.w	lr, #0
 80005ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fe:	d31b      	bcc.n	8000638 <__adddf3+0x124>
 8000600:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000604:	d30c      	bcc.n	8000620 <__adddf3+0x10c>
 8000606:	0849      	lsrs	r1, r1, #1
 8000608:	ea5f 0030 	movs.w	r0, r0, rrx
 800060c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000610:	f104 0401 	add.w	r4, r4, #1
 8000614:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000618:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800061c:	f080 809a 	bcs.w	8000754 <__adddf3+0x240>
 8000620:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	ea41 0105 	orr.w	r1, r1, r5
 8000636:	bd30      	pop	{r4, r5, pc}
 8000638:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800063c:	4140      	adcs	r0, r0
 800063e:	eb41 0101 	adc.w	r1, r1, r1
 8000642:	3c01      	subs	r4, #1
 8000644:	bf28      	it	cs
 8000646:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064a:	d2e9      	bcs.n	8000620 <__adddf3+0x10c>
 800064c:	f091 0f00 	teq	r1, #0
 8000650:	bf04      	itt	eq
 8000652:	4601      	moveq	r1, r0
 8000654:	2000      	moveq	r0, #0
 8000656:	fab1 f381 	clz	r3, r1
 800065a:	bf08      	it	eq
 800065c:	3320      	addeq	r3, #32
 800065e:	f1a3 030b 	sub.w	r3, r3, #11
 8000662:	f1b3 0220 	subs.w	r2, r3, #32
 8000666:	da0c      	bge.n	8000682 <__adddf3+0x16e>
 8000668:	320c      	adds	r2, #12
 800066a:	dd08      	ble.n	800067e <__adddf3+0x16a>
 800066c:	f102 0c14 	add.w	ip, r2, #20
 8000670:	f1c2 020c 	rsb	r2, r2, #12
 8000674:	fa01 f00c 	lsl.w	r0, r1, ip
 8000678:	fa21 f102 	lsr.w	r1, r1, r2
 800067c:	e00c      	b.n	8000698 <__adddf3+0x184>
 800067e:	f102 0214 	add.w	r2, r2, #20
 8000682:	bfd8      	it	le
 8000684:	f1c2 0c20 	rsble	ip, r2, #32
 8000688:	fa01 f102 	lsl.w	r1, r1, r2
 800068c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000690:	bfdc      	itt	le
 8000692:	ea41 010c 	orrle.w	r1, r1, ip
 8000696:	4090      	lslle	r0, r2
 8000698:	1ae4      	subs	r4, r4, r3
 800069a:	bfa2      	ittt	ge
 800069c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a0:	4329      	orrge	r1, r5
 80006a2:	bd30      	popge	{r4, r5, pc}
 80006a4:	ea6f 0404 	mvn.w	r4, r4
 80006a8:	3c1f      	subs	r4, #31
 80006aa:	da1c      	bge.n	80006e6 <__adddf3+0x1d2>
 80006ac:	340c      	adds	r4, #12
 80006ae:	dc0e      	bgt.n	80006ce <__adddf3+0x1ba>
 80006b0:	f104 0414 	add.w	r4, r4, #20
 80006b4:	f1c4 0220 	rsb	r2, r4, #32
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f302 	lsl.w	r3, r1, r2
 80006c0:	ea40 0003 	orr.w	r0, r0, r3
 80006c4:	fa21 f304 	lsr.w	r3, r1, r4
 80006c8:	ea45 0103 	orr.w	r1, r5, r3
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f1c4 040c 	rsb	r4, r4, #12
 80006d2:	f1c4 0220 	rsb	r2, r4, #32
 80006d6:	fa20 f002 	lsr.w	r0, r0, r2
 80006da:	fa01 f304 	lsl.w	r3, r1, r4
 80006de:	ea40 0003 	orr.w	r0, r0, r3
 80006e2:	4629      	mov	r1, r5
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ea:	4629      	mov	r1, r5
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	f094 0f00 	teq	r4, #0
 80006f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f6:	bf06      	itte	eq
 80006f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006fc:	3401      	addeq	r4, #1
 80006fe:	3d01      	subne	r5, #1
 8000700:	e74e      	b.n	80005a0 <__adddf3+0x8c>
 8000702:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000706:	bf18      	it	ne
 8000708:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800070c:	d029      	beq.n	8000762 <__adddf3+0x24e>
 800070e:	ea94 0f05 	teq	r4, r5
 8000712:	bf08      	it	eq
 8000714:	ea90 0f02 	teqeq	r0, r2
 8000718:	d005      	beq.n	8000726 <__adddf3+0x212>
 800071a:	ea54 0c00 	orrs.w	ip, r4, r0
 800071e:	bf04      	itt	eq
 8000720:	4619      	moveq	r1, r3
 8000722:	4610      	moveq	r0, r2
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	ea91 0f03 	teq	r1, r3
 800072a:	bf1e      	ittt	ne
 800072c:	2100      	movne	r1, #0
 800072e:	2000      	movne	r0, #0
 8000730:	bd30      	popne	{r4, r5, pc}
 8000732:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000736:	d105      	bne.n	8000744 <__adddf3+0x230>
 8000738:	0040      	lsls	r0, r0, #1
 800073a:	4149      	adcs	r1, r1
 800073c:	bf28      	it	cs
 800073e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd30      	pop	{r4, r5, pc}
 8000744:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000748:	bf3c      	itt	cc
 800074a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074e:	bd30      	popcc	{r4, r5, pc}
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000754:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000766:	bf1a      	itte	ne
 8000768:	4619      	movne	r1, r3
 800076a:	4610      	movne	r0, r2
 800076c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000770:	bf1c      	itt	ne
 8000772:	460b      	movne	r3, r1
 8000774:	4602      	movne	r2, r0
 8000776:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077a:	bf06      	itte	eq
 800077c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000780:	ea91 0f03 	teqeq	r1, r3
 8000784:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000788:	bd30      	pop	{r4, r5, pc}
 800078a:	bf00      	nop

0800078c <__aeabi_ui2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a0:	f04f 0500 	mov.w	r5, #0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e750      	b.n	800064c <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_i2d>:
 80007ac:	f090 0f00 	teq	r0, #0
 80007b0:	bf04      	itt	eq
 80007b2:	2100      	moveq	r1, #0
 80007b4:	4770      	bxeq	lr
 80007b6:	b530      	push	{r4, r5, lr}
 80007b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c4:	bf48      	it	mi
 80007c6:	4240      	negmi	r0, r0
 80007c8:	f04f 0100 	mov.w	r1, #0
 80007cc:	e73e      	b.n	800064c <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_f2d>:
 80007d0:	0042      	lsls	r2, r0, #1
 80007d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007de:	bf1f      	itttt	ne
 80007e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007ec:	4770      	bxne	lr
 80007ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f2:	bf08      	it	eq
 80007f4:	4770      	bxeq	lr
 80007f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fa:	bf04      	itt	eq
 80007fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000800:	4770      	bxeq	lr
 8000802:	b530      	push	{r4, r5, lr}
 8000804:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000808:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800080c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000810:	e71c      	b.n	800064c <__adddf3+0x138>
 8000812:	bf00      	nop

08000814 <__aeabi_ul2d>:
 8000814:	ea50 0201 	orrs.w	r2, r0, r1
 8000818:	bf08      	it	eq
 800081a:	4770      	bxeq	lr
 800081c:	b530      	push	{r4, r5, lr}
 800081e:	f04f 0500 	mov.w	r5, #0
 8000822:	e00a      	b.n	800083a <__aeabi_l2d+0x16>

08000824 <__aeabi_l2d>:
 8000824:	ea50 0201 	orrs.w	r2, r0, r1
 8000828:	bf08      	it	eq
 800082a:	4770      	bxeq	lr
 800082c:	b530      	push	{r4, r5, lr}
 800082e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000832:	d502      	bpl.n	800083a <__aeabi_l2d+0x16>
 8000834:	4240      	negs	r0, r0
 8000836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000842:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000846:	f43f aed8 	beq.w	80005fa <__adddf3+0xe6>
 800084a:	f04f 0203 	mov.w	r2, #3
 800084e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000852:	bf18      	it	ne
 8000854:	3203      	addne	r2, #3
 8000856:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085a:	bf18      	it	ne
 800085c:	3203      	addne	r2, #3
 800085e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000862:	f1c2 0320 	rsb	r3, r2, #32
 8000866:	fa00 fc03 	lsl.w	ip, r0, r3
 800086a:	fa20 f002 	lsr.w	r0, r0, r2
 800086e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000872:	ea40 000e 	orr.w	r0, r0, lr
 8000876:	fa21 f102 	lsr.w	r1, r1, r2
 800087a:	4414      	add	r4, r2
 800087c:	e6bd      	b.n	80005fa <__adddf3+0xe6>
 800087e:	bf00      	nop

08000880 <__gedf2>:
 8000880:	f04f 3cff 	mov.w	ip, #4294967295
 8000884:	e006      	b.n	8000894 <__cmpdf2+0x4>
 8000886:	bf00      	nop

08000888 <__ledf2>:
 8000888:	f04f 0c01 	mov.w	ip, #1
 800088c:	e002      	b.n	8000894 <__cmpdf2+0x4>
 800088e:	bf00      	nop

08000890 <__cmpdf2>:
 8000890:	f04f 0c01 	mov.w	ip, #1
 8000894:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000898:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800089c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a4:	bf18      	it	ne
 80008a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008aa:	d01b      	beq.n	80008e4 <__cmpdf2+0x54>
 80008ac:	b001      	add	sp, #4
 80008ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008b2:	bf0c      	ite	eq
 80008b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b8:	ea91 0f03 	teqne	r1, r3
 80008bc:	bf02      	ittt	eq
 80008be:	ea90 0f02 	teqeq	r0, r2
 80008c2:	2000      	moveq	r0, #0
 80008c4:	4770      	bxeq	lr
 80008c6:	f110 0f00 	cmn.w	r0, #0
 80008ca:	ea91 0f03 	teq	r1, r3
 80008ce:	bf58      	it	pl
 80008d0:	4299      	cmppl	r1, r3
 80008d2:	bf08      	it	eq
 80008d4:	4290      	cmpeq	r0, r2
 80008d6:	bf2c      	ite	cs
 80008d8:	17d8      	asrcs	r0, r3, #31
 80008da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008de:	f040 0001 	orr.w	r0, r0, #1
 80008e2:	4770      	bx	lr
 80008e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ec:	d102      	bne.n	80008f4 <__cmpdf2+0x64>
 80008ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008f2:	d107      	bne.n	8000904 <__cmpdf2+0x74>
 80008f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008fc:	d1d6      	bne.n	80008ac <__cmpdf2+0x1c>
 80008fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000902:	d0d3      	beq.n	80008ac <__cmpdf2+0x1c>
 8000904:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_cdrcmple>:
 800090c:	4684      	mov	ip, r0
 800090e:	4610      	mov	r0, r2
 8000910:	4662      	mov	r2, ip
 8000912:	468c      	mov	ip, r1
 8000914:	4619      	mov	r1, r3
 8000916:	4663      	mov	r3, ip
 8000918:	e000      	b.n	800091c <__aeabi_cdcmpeq>
 800091a:	bf00      	nop

0800091c <__aeabi_cdcmpeq>:
 800091c:	b501      	push	{r0, lr}
 800091e:	f7ff ffb7 	bl	8000890 <__cmpdf2>
 8000922:	2800      	cmp	r0, #0
 8000924:	bf48      	it	mi
 8000926:	f110 0f00 	cmnmi.w	r0, #0
 800092a:	bd01      	pop	{r0, pc}

0800092c <__aeabi_dcmpeq>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff fff4 	bl	800091c <__aeabi_cdcmpeq>
 8000934:	bf0c      	ite	eq
 8000936:	2001      	moveq	r0, #1
 8000938:	2000      	movne	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmplt>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffea 	bl	800091c <__aeabi_cdcmpeq>
 8000948:	bf34      	ite	cc
 800094a:	2001      	movcc	r0, #1
 800094c:	2000      	movcs	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmple>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffe0 	bl	800091c <__aeabi_cdcmpeq>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpge>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffce 	bl	800090c <__aeabi_cdrcmple>
 8000970:	bf94      	ite	ls
 8000972:	2001      	movls	r0, #1
 8000974:	2000      	movhi	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_dcmpgt>:
 800097c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000980:	f7ff ffc4 	bl	800090c <__aeabi_cdrcmple>
 8000984:	bf34      	ite	cc
 8000986:	2001      	movcc	r0, #1
 8000988:	2000      	movcs	r0, #0
 800098a:	f85d fb08 	ldr.w	pc, [sp], #8
 800098e:	bf00      	nop

08000990 <__aeabi_d2uiz>:
 8000990:	004a      	lsls	r2, r1, #1
 8000992:	d211      	bcs.n	80009b8 <__aeabi_d2uiz+0x28>
 8000994:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000998:	d211      	bcs.n	80009be <__aeabi_d2uiz+0x2e>
 800099a:	d50d      	bpl.n	80009b8 <__aeabi_d2uiz+0x28>
 800099c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a4:	d40e      	bmi.n	80009c4 <__aeabi_d2uiz+0x34>
 80009a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c2:	d102      	bne.n	80009ca <__aeabi_d2uiz+0x3a>
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	4770      	bx	lr
 80009ca:	f04f 0000 	mov.w	r0, #0
 80009ce:	4770      	bx	lr

080009d0 <__aeabi_frsub>:
 80009d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d4:	e002      	b.n	80009dc <__addsf3>
 80009d6:	bf00      	nop

080009d8 <__aeabi_fsub>:
 80009d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009dc <__addsf3>:
 80009dc:	0042      	lsls	r2, r0, #1
 80009de:	bf1f      	itttt	ne
 80009e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e4:	ea92 0f03 	teqne	r2, r3
 80009e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f0:	d06a      	beq.n	8000ac8 <__addsf3+0xec>
 80009f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009fa:	bfc1      	itttt	gt
 80009fc:	18d2      	addgt	r2, r2, r3
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	4048      	eorgt	r0, r1
 8000a02:	4041      	eorgt	r1, r0
 8000a04:	bfb8      	it	lt
 8000a06:	425b      	neglt	r3, r3
 8000a08:	2b19      	cmp	r3, #25
 8000a0a:	bf88      	it	hi
 8000a0c:	4770      	bxhi	lr
 8000a0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a1a:	bf18      	it	ne
 8000a1c:	4240      	negne	r0, r0
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a2a:	bf18      	it	ne
 8000a2c:	4249      	negne	r1, r1
 8000a2e:	ea92 0f03 	teq	r2, r3
 8000a32:	d03f      	beq.n	8000ab4 <__addsf3+0xd8>
 8000a34:	f1a2 0201 	sub.w	r2, r2, #1
 8000a38:	fa41 fc03 	asr.w	ip, r1, r3
 8000a3c:	eb10 000c 	adds.w	r0, r0, ip
 8000a40:	f1c3 0320 	rsb	r3, r3, #32
 8000a44:	fa01 f103 	lsl.w	r1, r1, r3
 8000a48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a4c:	d502      	bpl.n	8000a54 <__addsf3+0x78>
 8000a4e:	4249      	negs	r1, r1
 8000a50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a58:	d313      	bcc.n	8000a82 <__addsf3+0xa6>
 8000a5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5e:	d306      	bcc.n	8000a6e <__addsf3+0x92>
 8000a60:	0840      	lsrs	r0, r0, #1
 8000a62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a66:	f102 0201 	add.w	r2, r2, #1
 8000a6a:	2afe      	cmp	r2, #254	; 0xfe
 8000a6c:	d251      	bcs.n	8000b12 <__addsf3+0x136>
 8000a6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a76:	bf08      	it	eq
 8000a78:	f020 0001 	biceq.w	r0, r0, #1
 8000a7c:	ea40 0003 	orr.w	r0, r0, r3
 8000a80:	4770      	bx	lr
 8000a82:	0049      	lsls	r1, r1, #1
 8000a84:	eb40 0000 	adc.w	r0, r0, r0
 8000a88:	3a01      	subs	r2, #1
 8000a8a:	bf28      	it	cs
 8000a8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a90:	d2ed      	bcs.n	8000a6e <__addsf3+0x92>
 8000a92:	fab0 fc80 	clz	ip, r0
 8000a96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aa2:	bfaa      	itet	ge
 8000aa4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa8:	4252      	neglt	r2, r2
 8000aaa:	4318      	orrge	r0, r3
 8000aac:	bfbc      	itt	lt
 8000aae:	40d0      	lsrlt	r0, r2
 8000ab0:	4318      	orrlt	r0, r3
 8000ab2:	4770      	bx	lr
 8000ab4:	f092 0f00 	teq	r2, #0
 8000ab8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000abc:	bf06      	itte	eq
 8000abe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ac2:	3201      	addeq	r2, #1
 8000ac4:	3b01      	subne	r3, #1
 8000ac6:	e7b5      	b.n	8000a34 <__addsf3+0x58>
 8000ac8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000acc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad0:	bf18      	it	ne
 8000ad2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad6:	d021      	beq.n	8000b1c <__addsf3+0x140>
 8000ad8:	ea92 0f03 	teq	r2, r3
 8000adc:	d004      	beq.n	8000ae8 <__addsf3+0x10c>
 8000ade:	f092 0f00 	teq	r2, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	4608      	moveq	r0, r1
 8000ae6:	4770      	bx	lr
 8000ae8:	ea90 0f01 	teq	r0, r1
 8000aec:	bf1c      	itt	ne
 8000aee:	2000      	movne	r0, #0
 8000af0:	4770      	bxne	lr
 8000af2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af6:	d104      	bne.n	8000b02 <__addsf3+0x126>
 8000af8:	0040      	lsls	r0, r0, #1
 8000afa:	bf28      	it	cs
 8000afc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	4770      	bx	lr
 8000b02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b06:	bf3c      	itt	cc
 8000b08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b0c:	4770      	bxcc	lr
 8000b0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1a:	4770      	bx	lr
 8000b1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b20:	bf16      	itet	ne
 8000b22:	4608      	movne	r0, r1
 8000b24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b28:	4601      	movne	r1, r0
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	bf06      	itte	eq
 8000b2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b32:	ea90 0f01 	teqeq	r0, r1
 8000b36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_ui2f>:
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e004      	b.n	8000b4c <__aeabi_i2f+0x8>
 8000b42:	bf00      	nop

08000b44 <__aeabi_i2f>:
 8000b44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b48:	bf48      	it	mi
 8000b4a:	4240      	negmi	r0, r0
 8000b4c:	ea5f 0c00 	movs.w	ip, r0
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b58:	4601      	mov	r1, r0
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	e01c      	b.n	8000b9a <__aeabi_l2f+0x2a>

08000b60 <__aeabi_ul2f>:
 8000b60:	ea50 0201 	orrs.w	r2, r0, r1
 8000b64:	bf08      	it	eq
 8000b66:	4770      	bxeq	lr
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e00a      	b.n	8000b84 <__aeabi_l2f+0x14>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_l2f>:
 8000b70:	ea50 0201 	orrs.w	r2, r0, r1
 8000b74:	bf08      	it	eq
 8000b76:	4770      	bxeq	lr
 8000b78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__aeabi_l2f+0x14>
 8000b7e:	4240      	negs	r0, r0
 8000b80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b84:	ea5f 0c01 	movs.w	ip, r1
 8000b88:	bf02      	ittt	eq
 8000b8a:	4684      	moveq	ip, r0
 8000b8c:	4601      	moveq	r1, r0
 8000b8e:	2000      	moveq	r0, #0
 8000b90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b94:	bf08      	it	eq
 8000b96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9e:	fabc f28c 	clz	r2, ip
 8000ba2:	3a08      	subs	r2, #8
 8000ba4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba8:	db10      	blt.n	8000bcc <__aeabi_l2f+0x5c>
 8000baa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bae:	4463      	add	r3, ip
 8000bb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb4:	f1c2 0220 	rsb	r2, r2, #32
 8000bb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc0:	eb43 0002 	adc.w	r0, r3, r2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f102 0220 	add.w	r2, r2, #32
 8000bd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd4:	f1c2 0220 	rsb	r2, r2, #32
 8000bd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bdc:	fa21 f202 	lsr.w	r2, r1, r2
 8000be0:	eb43 0002 	adc.w	r0, r3, r2
 8000be4:	bf08      	it	eq
 8000be6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bea:	4770      	bx	lr

08000bec <__aeabi_f2iz>:
 8000bec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf4:	d30f      	bcc.n	8000c16 <__aeabi_f2iz+0x2a>
 8000bf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_f2iz+0x30>
 8000c00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c10:	bf18      	it	ne
 8000c12:	4240      	negne	r0, r0
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr
 8000c1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c20:	d101      	bne.n	8000c26 <__aeabi_f2iz+0x3a>
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	d105      	bne.n	8000c32 <__aeabi_f2iz+0x46>
 8000c26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c2a:	bf08      	it	eq
 8000c2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <Set_Pin_Output>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	  	{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
	  		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
	  		GPIO_InitStruct.Pin = GPIO_Pin;
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	60bb      	str	r3, [r7, #8]
	  		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	617b      	str	r3, [r7, #20]
	  		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4619      	mov	r1, r3
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 ff73 	bl	8001b50 <HAL_GPIO_Init>
	  	}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <Set_Pin_Input>:

	  	void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	  	{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
	  		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
	  		GPIO_InitStruct.Pin = GPIO_Pin;
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	60bb      	str	r3, [r7, #8]
	  		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
	  		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	613b      	str	r3, [r7, #16]
	  		HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 ff56 	bl	8001b50 <HAL_GPIO_Init>
	  	}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <motor_control>:

	  	void motor_control (double pos_right, double pos_left)
	  	{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000cb6:	e9c7 2300 	strd	r2, r3, [r7]
	  		if (pos_left < 0 )
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cc6:	f7ff fe3b 	bl	8000940 <__aeabi_dcmplt>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d016      	beq.n	8000cfe <motor_control+0x52>
	  		{
	  			__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, ARR*0);
 8000cd0:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <motor_control+0xf8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
	  			__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_2, ARR*pos_left);
 8000cd8:	230a      	movs	r3, #10
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd66 	bl	80007ac <__aeabi_i2d>
 8000ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ce4:	f7ff fa32 	bl	800014c <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	492d      	ldr	r1, [pc, #180]	; (8000da4 <motor_control+0xf8>)
 8000cee:	680c      	ldr	r4, [r1, #0]
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f7ff fe4c 	bl	8000990 <__aeabi_d2uiz>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	63a3      	str	r3, [r4, #56]	; 0x38
 8000cfc:	e015      	b.n	8000d2a <motor_control+0x7e>
	  		}
	  		else
	  		{
	  			__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, ARR*pos_left);
 8000cfe:	230a      	movs	r3, #10
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fd53 	bl	80007ac <__aeabi_i2d>
 8000d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d0a:	f7ff fa1f 	bl	800014c <__aeabi_dmul>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4924      	ldr	r1, [pc, #144]	; (8000da4 <motor_control+0xf8>)
 8000d14:	680c      	ldr	r4, [r1, #0]
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f7ff fe39 	bl	8000990 <__aeabi_d2uiz>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6363      	str	r3, [r4, #52]	; 0x34
	  			__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_2, ARR*0);
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <motor_control+0xf8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2200      	movs	r2, #0
 8000d28:	639a      	str	r2, [r3, #56]	; 0x38
	  		}
	  		if (pos_right < 0 )
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	f04f 0300 	mov.w	r3, #0
 8000d32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d36:	f7ff fe03 	bl	8000940 <__aeabi_dcmplt>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d016      	beq.n	8000d6e <motor_control+0xc2>
	  		{
	  			__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, ARR*0);
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <motor_control+0xfc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
	  			__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, ARR*pos_right);
 8000d48:	230a      	movs	r3, #10
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fd2e 	bl	80007ac <__aeabi_i2d>
 8000d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d54:	f7ff f9fa 	bl	800014c <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4912      	ldr	r1, [pc, #72]	; (8000da8 <motor_control+0xfc>)
 8000d5e:	680c      	ldr	r4, [r1, #0]
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff fe14 	bl	8000990 <__aeabi_d2uiz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	63a3      	str	r3, [r4, #56]	; 0x38
	  		else
	  		{
	  			__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, ARR*pos_right);
	  			__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, ARR*0);
	  		}
	  	}
 8000d6c:	e015      	b.n	8000d9a <motor_control+0xee>
	  			__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, ARR*pos_right);
 8000d6e:	230a      	movs	r3, #10
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fd1b 	bl	80007ac <__aeabi_i2d>
 8000d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d7a:	f7ff f9e7 	bl	800014c <__aeabi_dmul>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4909      	ldr	r1, [pc, #36]	; (8000da8 <motor_control+0xfc>)
 8000d84:	680c      	ldr	r4, [r1, #0]
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fe01 	bl	8000990 <__aeabi_d2uiz>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6363      	str	r3, [r4, #52]	; 0x34
	  			__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, ARR*0);
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <motor_control+0xfc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	639a      	str	r2, [r3, #56]	; 0x38
	  	}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000034 	.word	0x20000034
 8000da8:	2000007c 	.word	0x2000007c

08000dac <sharp_turn>:

	  	void sharp_turn () {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

	  		if (last_idle < 25)
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <sharp_turn+0x98>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b18      	cmp	r3, #24
 8000db6:	dc21      	bgt.n	8000dfc <sharp_turn+0x50>
	  		{
	  			if (last_end == 1)
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <sharp_turn+0x9c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d107      	bne.n	8000dd0 <sharp_turn+0x24>
	  				motor_control(-20, 100);
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <sharp_turn+0xa0>)
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	4921      	ldr	r1, [pc, #132]	; (8000e50 <sharp_turn+0xa4>)
 8000dcc:	f7ff ff6e 	bl	8000cac <motor_control>
	  			if (last_end == 2)
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <sharp_turn+0x9c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d108      	bne.n	8000dea <sharp_turn+0x3e>
	  				motor_control(100, 100);
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <sharp_turn+0xa0>)
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	491a      	ldr	r1, [pc, #104]	; (8000e4c <sharp_turn+0xa0>)
 8000de4:	f7ff ff62 	bl	8000cac <motor_control>
	  			if (last_end == 2)
	  				motor_control(100, 100);
	  			else
	  				motor_control(70, -53);
	  		}
	  	}
 8000de8:	e029      	b.n	8000e3e <sharp_turn+0x92>
	  				motor_control(100, -20);
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <sharp_turn+0xa4>)
 8000df0:	f04f 0000 	mov.w	r0, #0
 8000df4:	4915      	ldr	r1, [pc, #84]	; (8000e4c <sharp_turn+0xa0>)
 8000df6:	f7ff ff59 	bl	8000cac <motor_control>
	  	}
 8000dfa:	e020      	b.n	8000e3e <sharp_turn+0x92>
	  			if (last_end == 1)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <sharp_turn+0x9c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d107      	bne.n	8000e14 <sharp_turn+0x68>
	  				motor_control(-53, 70);
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <sharp_turn+0xa8>)
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	4912      	ldr	r1, [pc, #72]	; (8000e58 <sharp_turn+0xac>)
 8000e10:	f7ff ff4c 	bl	8000cac <motor_control>
	  			if (last_end == 2)
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <sharp_turn+0x9c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d108      	bne.n	8000e2e <sharp_turn+0x82>
	  				motor_control(100, 100);
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <sharp_turn+0xa0>)
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	4909      	ldr	r1, [pc, #36]	; (8000e4c <sharp_turn+0xa0>)
 8000e28:	f7ff ff40 	bl	8000cac <motor_control>
	  	}
 8000e2c:	e007      	b.n	8000e3e <sharp_turn+0x92>
	  				motor_control(70, -53);
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <sharp_turn+0xac>)
 8000e34:	f04f 0000 	mov.w	r0, #0
 8000e38:	4906      	ldr	r1, [pc, #24]	; (8000e54 <sharp_turn+0xa8>)
 8000e3a:	f7ff ff37 	bl	8000cac <motor_control>
	  	}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000110 	.word	0x20000110
 8000e48:	2000010c 	.word	0x2000010c
 8000e4c:	40590000 	.word	0x40590000
 8000e50:	c0340000 	.word	0xc0340000
 8000e54:	40518000 	.word	0x40518000
 8000e58:	c04a8000 	.word	0xc04a8000

08000e5c <QTR8_read>:

	  	int QTR8_read ()
	  	{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	  	//	HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);

	  		Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8000e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e66:	4876      	ldr	r0, [pc, #472]	; (8001040 <QTR8_read+0x1e4>)
 8000e68:	f7ff fee6 	bl	8000c38 <Set_Pin_Output>
	  		Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4873      	ldr	r0, [pc, #460]	; (8001040 <QTR8_read+0x1e4>)
 8000e72:	f7ff fee1 	bl	8000c38 <Set_Pin_Output>
	  		Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8000e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7a:	4871      	ldr	r0, [pc, #452]	; (8001040 <QTR8_read+0x1e4>)
 8000e7c:	f7ff fedc 	bl	8000c38 <Set_Pin_Output>
	  		Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	486e      	ldr	r0, [pc, #440]	; (8001040 <QTR8_read+0x1e4>)
 8000e86:	f7ff fed7 	bl	8000c38 <Set_Pin_Output>
	  		Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8000e8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8e:	486c      	ldr	r0, [pc, #432]	; (8001040 <QTR8_read+0x1e4>)
 8000e90:	f7ff fed2 	bl	8000c38 <Set_Pin_Output>
	  		//Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
	  		//Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
	  		//Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);

	  		HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9a:	4869      	ldr	r0, [pc, #420]	; (8001040 <QTR8_read+0x1e4>)
 8000e9c:	f000 fff3 	bl	8001e86 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea6:	4866      	ldr	r0, [pc, #408]	; (8001040 <QTR8_read+0x1e4>)
 8000ea8:	f000 ffed 	bl	8001e86 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb2:	4863      	ldr	r0, [pc, #396]	; (8001040 <QTR8_read+0x1e4>)
 8000eb4:	f000 ffe7 	bl	8001e86 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebe:	4860      	ldr	r0, [pc, #384]	; (8001040 <QTR8_read+0x1e4>)
 8000ec0:	f000 ffe1 	bl	8001e86 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eca:	485d      	ldr	r0, [pc, #372]	; (8001040 <QTR8_read+0x1e4>)
 8000ecc:	f000 ffdb 	bl	8001e86 <HAL_GPIO_WritePin>
	  		//HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
	  		//HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);

	  		//delay_us(12);

	  		Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8000ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed4:	485a      	ldr	r0, [pc, #360]	; (8001040 <QTR8_read+0x1e4>)
 8000ed6:	f7ff fecc 	bl	8000c72 <Set_Pin_Input>
	  		Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8000eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ede:	4858      	ldr	r0, [pc, #352]	; (8001040 <QTR8_read+0x1e4>)
 8000ee0:	f7ff fec7 	bl	8000c72 <Set_Pin_Input>
	  		Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	4855      	ldr	r0, [pc, #340]	; (8001040 <QTR8_read+0x1e4>)
 8000eea:	f7ff fec2 	bl	8000c72 <Set_Pin_Input>
	  		Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8000eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef2:	4853      	ldr	r0, [pc, #332]	; (8001040 <QTR8_read+0x1e4>)
 8000ef4:	f7ff febd 	bl	8000c72 <Set_Pin_Input>
	  		Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8000ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efc:	4850      	ldr	r0, [pc, #320]	; (8001040 <QTR8_read+0x1e4>)
 8000efe:	f7ff feb8 	bl	8000c72 <Set_Pin_Input>
	  		//Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
	  		//Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);

	  		// Threshold
	  		//delay_us(6000);
	  		HAL_Delay(10);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f000 fd1c 	bl	8001940 <HAL_Delay>
	  		sensor_read = 0x00000;
 8000f08:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <QTR8_read+0x1e8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	  		int pos = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
	  	  int active = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]

	  		if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	4849      	ldr	r0, [pc, #292]	; (8001040 <QTR8_read+0x1e4>)
 8000f1c:	f000 ff9c 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00f      	beq.n	8000f46 <QTR8_read+0xea>
	  			sensor_read |= 0x00001;
 8000f26:	4b47      	ldr	r3, [pc, #284]	; (8001044 <QTR8_read+0x1e8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	4a45      	ldr	r2, [pc, #276]	; (8001044 <QTR8_read+0x1e8>)
 8000f30:	6013      	str	r3, [r2, #0]
	  			pos += 1000;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f38:	607b      	str	r3, [r7, #4]
	  	    active++;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	603b      	str	r3, [r7, #0]
	  			last_end = 1;
 8000f40:	4b41      	ldr	r3, [pc, #260]	; (8001048 <QTR8_read+0x1ec>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
	  		}
	  		if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	483d      	ldr	r0, [pc, #244]	; (8001040 <QTR8_read+0x1e4>)
 8000f4c:	f000 ff84 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00f      	beq.n	8000f76 <QTR8_read+0x11a>
	  			sensor_read |= 0x00010;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <QTR8_read+0x1e8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	4a39      	ldr	r2, [pc, #228]	; (8001044 <QTR8_read+0x1e8>)
 8000f60:	6013      	str	r3, [r2, #0]
	  			pos += 2000;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f68:	607b      	str	r3, [r7, #4]
	  	    active++;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
	  	     last_end = 1;
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <QTR8_read+0x1ec>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
	  	  }
	  		if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	4831      	ldr	r0, [pc, #196]	; (8001040 <QTR8_read+0x1e4>)
 8000f7c:	f000 ff6c 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00f      	beq.n	8000fa6 <QTR8_read+0x14a>
	  			sensor_read |= 0x00100;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <QTR8_read+0x1e8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	; (8001044 <QTR8_read+0x1e8>)
 8000f90:	6013      	str	r3, [r2, #0]
	  			pos += 3000;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000f98:	607b      	str	r3, [r7, #4]
	  	    active++;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	603b      	str	r3, [r7, #0]
	  	    last_end = 2;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <QTR8_read+0x1ec>)
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	601a      	str	r2, [r3, #0]
	  	  }
	  		if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8000fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000faa:	4825      	ldr	r0, [pc, #148]	; (8001040 <QTR8_read+0x1e4>)
 8000fac:	f000 ff54 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00f      	beq.n	8000fd6 <QTR8_read+0x17a>
	  			sensor_read |= 0x01000;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <QTR8_read+0x1e8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <QTR8_read+0x1e8>)
 8000fc0:	6013      	str	r3, [r2, #0]
	  			pos += 4000;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8000fc8:	607b      	str	r3, [r7, #4]
	  	    active++;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
	  	    last_end = 0;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <QTR8_read+0x1ec>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
	  	  }
	  		if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8000fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <QTR8_read+0x1e4>)
 8000fdc:	f000 ff3c 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d010      	beq.n	8001008 <QTR8_read+0x1ac>
	  			sensor_read |= 0x10000;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <QTR8_read+0x1e8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <QTR8_read+0x1e8>)
 8000ff0:	6013      	str	r3, [r2, #0]
	  			pos += 5000;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	607b      	str	r3, [r7, #4]
	  	    active++;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	603b      	str	r3, [r7, #0]
	  	    last_end = 0 ;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <QTR8_read+0x1ec>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
	  			//last_end = 0;
	  	  //}

	  	 // HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);

	  	  actives = active;
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <QTR8_read+0x1f0>)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	6013      	str	r3, [r2, #0]
	  		position = pos/active;
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	fb92 f3f3 	sdiv	r3, r2, r3
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <QTR8_read+0x1f4>)
 8001018:	6013      	str	r3, [r2, #0]

	  		if (actives == 0)
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <QTR8_read+0x1f0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <QTR8_read+0x1d2>
	  			last_idle++;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <QTR8_read+0x1f8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <QTR8_read+0x1f8>)
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e002      	b.n	8001034 <QTR8_read+0x1d8>
	  		else
	  			last_idle = 0;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <QTR8_read+0x1f8>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

	  		return position;//pos/active;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <QTR8_read+0x1f4>)
 8001036:	681b      	ldr	r3, [r3, #0]
	  	}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40010800 	.word	0x40010800
 8001044:	200000c4 	.word	0x200000c4
 8001048:	2000010c 	.word	0x2000010c
 800104c:	20000114 	.word	0x20000114
 8001050:	200000c8 	.word	0x200000c8
 8001054:	20000110 	.word	0x20000110

08001058 <forward_brake>:

	  	void forward_brake(int pos_right, int pos_left)
	  	{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	  		if (actives == 0)
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <forward_brake+0x3c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <forward_brake+0x18>
	  			sharp_turn();
 800106a:	f7ff fe9f 	bl	8000dac <sharp_turn>
	  		else
	  		  motor_control(pos_right, pos_left);
	  	}
 800106e:	e00d      	b.n	800108c <forward_brake+0x34>
	  		  motor_control(pos_right, pos_left);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff fb9b 	bl	80007ac <__aeabi_i2d>
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	6838      	ldr	r0, [r7, #0]
 800107c:	f7ff fb96 	bl	80007ac <__aeabi_i2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff fe10 	bl	8000cac <motor_control>
	  	}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	20000114 	.word	0x20000114

08001098 <past_errors>:

	  	void past_errors (int error)
	  	{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	  	  for (int i = 9; i > 0; i--)
 80010a0:	2309      	movs	r3, #9
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e00b      	b.n	80010be <past_errors+0x26>
	  	      errors[i] = errors[i-1];
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <past_errors+0x3c>)
 80010ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b0:	4908      	ldr	r1, [pc, #32]	; (80010d4 <past_errors+0x3c>)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	  for (int i = 9; i > 0; i--)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dcf0      	bgt.n	80010a6 <past_errors+0xe>
	  	  errors[0] = error;
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <past_errors+0x3c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
	  	}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	200000e4 	.word	0x200000e4

080010d8 <errors_sum>:

	  	int errors_sum (int index, int abs)
	  	{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	  	  int sum = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
	  	  for (int i = 0; i < index; i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	e01a      	b.n	8001122 <errors_sum+0x4a>
	  	  {
	  	    if (abs == 1 && errors[i] < 0)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d10d      	bne.n	800110e <errors_sum+0x36>
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <errors_sum+0x60>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da07      	bge.n	800110e <errors_sum+0x36>
	  	      sum += -errors[i];
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <errors_sum+0x60>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e006      	b.n	800111c <errors_sum+0x44>
	  	    else
	  	      sum += errors[i];
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <errors_sum+0x60>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
	  	  for (int i = 0; i < index; i++)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3301      	adds	r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	dbe0      	blt.n	80010ec <errors_sum+0x14>
	  	  }
	  	  return sum;
 800112a:	68fb      	ldr	r3, [r7, #12]
	  	}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	200000e4 	.word	0x200000e4

0800113c <PID_control>:

	  	void PID_control() {
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
	  		uint16_t position = QTR8_read();
 8001142:	f7ff fe8b 	bl	8000e5c <QTR8_read>
 8001146:	4603      	mov	r3, r0
 8001148:	81fb      	strh	r3, [r7, #14]
	  	  int error = 3000 - position;
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001150:	3308      	adds	r3, #8
 8001152:	60bb      	str	r3, [r7, #8]
	  		past_errors(error);
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f7ff ff9f 	bl	8001098 <past_errors>

	  	  P = error;
 800115a:	4a53      	ldr	r2, [pc, #332]	; (80012a8 <PID_control+0x16c>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	6013      	str	r3, [r2, #0]
	  	  I = errors_sum(5, 0);
 8001160:	2100      	movs	r1, #0
 8001162:	2005      	movs	r0, #5
 8001164:	f7ff ffb8 	bl	80010d8 <errors_sum>
 8001168:	4603      	mov	r3, r0
 800116a:	4a50      	ldr	r2, [pc, #320]	; (80012ac <PID_control+0x170>)
 800116c:	6013      	str	r3, [r2, #0]
	  	  D = error - lastError;
 800116e:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <PID_control+0x174>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	4a4f      	ldr	r2, [pc, #316]	; (80012b4 <PID_control+0x178>)
 8001178:	6013      	str	r3, [r2, #0]
	  	  R = errors_sum(5, 1);
 800117a:	2101      	movs	r1, #1
 800117c:	2005      	movs	r0, #5
 800117e:	f7ff ffab 	bl	80010d8 <errors_sum>
 8001182:	4603      	mov	r3, r0
 8001184:	4a4c      	ldr	r2, [pc, #304]	; (80012b8 <PID_control+0x17c>)
 8001186:	6013      	str	r3, [r2, #0]
	  	  lastError = error;
 8001188:	4a49      	ldr	r2, [pc, #292]	; (80012b0 <PID_control+0x174>)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	6013      	str	r3, [r2, #0]

	  	  int motorspeed = P*Kp + I*Ki + D*Kd;
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <PID_control+0x16c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fcd6 	bl	8000b44 <__aeabi_i2f>
 8001198:	4602      	mov	r2, r0
 800119a:	4b48      	ldr	r3, [pc, #288]	; (80012bc <PID_control+0x180>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f7ff f8fd 	bl	80003a0 <__aeabi_fmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461c      	mov	r4, r3
 80011aa:	4b40      	ldr	r3, [pc, #256]	; (80012ac <PID_control+0x170>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fcc8 	bl	8000b44 <__aeabi_i2f>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <PID_control+0x184>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f7ff f8ef 	bl	80003a0 <__aeabi_fmul>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4620      	mov	r0, r4
 80011c8:	f7ff fc08 	bl	80009dc <__addsf3>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <PID_control+0x178>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fcb5 	bl	8000b44 <__aeabi_i2f>
 80011da:	4602      	mov	r2, r0
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <PID_control+0x188>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f7ff f8dc 	bl	80003a0 <__aeabi_fmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4619      	mov	r1, r3
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fbf5 	bl	80009dc <__addsf3>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fcf9 	bl	8000bec <__aeabi_f2iz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	607b      	str	r3, [r7, #4]

	  	  int motorspeedl = basespeedl + motorspeed - R*Kr;
 80011fe:	235c      	movs	r3, #92	; 0x5c
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fc9c 	bl	8000b44 <__aeabi_i2f>
 800120c:	4604      	mov	r4, r0
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <PID_control+0x17c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fc96 	bl	8000b44 <__aeabi_i2f>
 8001218:	4602      	mov	r2, r0
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <PID_control+0x18c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	4610      	mov	r0, r2
 8001222:	f7ff f8bd 	bl	80003a0 <__aeabi_fmul>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff fbd4 	bl	80009d8 <__aeabi_fsub>
 8001230:	4603      	mov	r3, r0
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fcda 	bl	8000bec <__aeabi_f2iz>
 8001238:	4603      	mov	r3, r0
 800123a:	617b      	str	r3, [r7, #20]
	  	  int motorspeedr = basespeedr - motorspeed - R*Kr;
 800123c:	235c      	movs	r3, #92	; 0x5c
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fc7d 	bl	8000b44 <__aeabi_i2f>
 800124a:	4604      	mov	r4, r0
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <PID_control+0x17c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc77 	bl	8000b44 <__aeabi_i2f>
 8001256:	4602      	mov	r2, r0
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <PID_control+0x18c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff f89e 	bl	80003a0 <__aeabi_fmul>
 8001264:	4603      	mov	r3, r0
 8001266:	4619      	mov	r1, r3
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff fbb5 	bl	80009d8 <__aeabi_fsub>
 800126e:	4603      	mov	r3, r0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fcbb 	bl	8000bec <__aeabi_f2iz>
 8001276:	4603      	mov	r3, r0
 8001278:	613b      	str	r3, [r7, #16]

	  	  if (motorspeedl > maxspeedl)
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	461a      	mov	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4293      	cmp	r3, r2
 8001282:	dd01      	ble.n	8001288 <PID_control+0x14c>
	  	    motorspeedl = maxspeedl;
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	617b      	str	r3, [r7, #20]
	  	  if (motorspeedr > maxspeedr)
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	461a      	mov	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4293      	cmp	r3, r2
 8001290:	dd01      	ble.n	8001296 <PID_control+0x15a>
	  	    motorspeedr = maxspeedr;
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	613b      	str	r3, [r7, #16]

	  		forward_brake(motorspeedr, motorspeedl);
 8001296:	6979      	ldr	r1, [r7, #20]
 8001298:	6938      	ldr	r0, [r7, #16]
 800129a:	f7ff fedd 	bl	8001058 <forward_brake>
	  	}
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000d0 	.word	0x200000d0
 80012ac:	200000d4 	.word	0x200000d4
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	200000d8 	.word	0x200000d8
 80012b8:	200000dc 	.word	0x200000dc
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004
 80012c4:	20000008 	.word	0x20000008
 80012c8:	200000cc 	.word	0x200000cc

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f000 fad4 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f832 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f000 f97a 	bl	80015d0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80012dc:	f000 f874 	bl	80013c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012e0:	f000 f8f4 	bl	80014cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012e4:	2100      	movs	r1, #0
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <main+0x68>)
 80012e8:	f001 fa6c 	bl	80027c4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4812      	ldr	r0, [pc, #72]	; (8001338 <main+0x6c>)
 80012f0:	f001 fa68 	bl	80027c4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f4:	2104      	movs	r1, #4
 80012f6:	480f      	ldr	r0, [pc, #60]	; (8001334 <main+0x68>)
 80012f8:	f001 fa64 	bl	80027c4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80012fc:	2104      	movs	r1, #4
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <main+0x6c>)
 8001300:	f001 fa60 	bl	80027c4 <HAL_TIM_PWM_Start>

  	__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, 100);
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <main+0x68>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2264      	movs	r2, #100	; 0x64
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_2, 100);
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <main+0x68>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2264      	movs	r2, #100	; 0x64
 8001312:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, 0);
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <main+0x6c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2200      	movs	r2, #0
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, 0);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <main+0x6c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
  	HAL_Delay(2000);
 8001324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001328:	f000 fb0a 	bl	8001940 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_control();
 800132c:	f7ff ff06 	bl	800113c <PID_control>
 8001330:	e7fc      	b.n	800132c <main+0x60>
 8001332:	bf00      	nop
 8001334:	20000034 	.word	0x20000034
 8001338:	2000007c 	.word	0x2000007c

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b090      	sub	sp, #64	; 0x40
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f001 ff8c 	bl	8003268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001366:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800137a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fd97 	bl	8001eb8 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001390:	f000 f962 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 f804 	bl	80023bc <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ba:	f000 f94d 	bl	8001658 <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	; 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f8:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <MX_TIM3_Init+0xfc>)
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <MX_TIM3_Init+0x100>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <MX_TIM3_Init+0xfc>)
 8001400:	224f      	movs	r2, #79	; 0x4f
 8001402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <MX_TIM3_Init+0xfc>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <MX_TIM3_Init+0xfc>)
 800140c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <MX_TIM3_Init+0xfc>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_TIM3_Init+0xfc>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141e:	4829      	ldr	r0, [pc, #164]	; (80014c4 <MX_TIM3_Init+0xfc>)
 8001420:	f001 f928 	bl	8002674 <HAL_TIM_Base_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800142a:	f000 f915 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001438:	4619      	mov	r1, r3
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <MX_TIM3_Init+0xfc>)
 800143c:	f001 fb26 	bl	8002a8c <HAL_TIM_ConfigClockSource>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001446:	f000 f907 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800144a:	481e      	ldr	r0, [pc, #120]	; (80014c4 <MX_TIM3_Init+0xfc>)
 800144c:	f001 f961 	bl	8002712 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001456:	f000 f8ff 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	4619      	mov	r1, r3
 8001468:	4816      	ldr	r0, [pc, #88]	; (80014c4 <MX_TIM3_Init+0xfc>)
 800146a:	f001 fe7b 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001474:	f000 f8f0 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 800147c:	23c7      	movs	r3, #199	; 0xc7
 800147e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM3_Init+0xfc>)
 8001490:	f001 fa3a 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800149a:	f000 f8dd 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_TIM3_Init+0xfc>)
 80014a6:	f001 fa2f 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014b0:	f000 f8d2 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <MX_TIM3_Init+0xfc>)
 80014b6:	f000 f939 	bl	800172c <HAL_TIM_MspPostInit>

}
 80014ba:	bf00      	nop
 80014bc:	3738      	adds	r7, #56	; 0x38
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000034 	.word	0x20000034
 80014c8:	40000400 	.word	0x40000400

080014cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014fc:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <MX_TIM4_Init+0xfc>)
 80014fe:	4a33      	ldr	r2, [pc, #204]	; (80015cc <MX_TIM4_Init+0x100>)
 8001500:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <MX_TIM4_Init+0xfc>)
 8001504:	224f      	movs	r2, #79	; 0x4f
 8001506:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <MX_TIM4_Init+0xfc>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <MX_TIM4_Init+0xfc>)
 8001510:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001514:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001516:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <MX_TIM4_Init+0xfc>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <MX_TIM4_Init+0xfc>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001522:	4829      	ldr	r0, [pc, #164]	; (80015c8 <MX_TIM4_Init+0xfc>)
 8001524:	f001 f8a6 	bl	8002674 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800152e:	f000 f893 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153c:	4619      	mov	r1, r3
 800153e:	4822      	ldr	r0, [pc, #136]	; (80015c8 <MX_TIM4_Init+0xfc>)
 8001540:	f001 faa4 	bl	8002a8c <HAL_TIM_ConfigClockSource>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800154a:	f000 f885 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800154e:	481e      	ldr	r0, [pc, #120]	; (80015c8 <MX_TIM4_Init+0xfc>)
 8001550:	f001 f8df 	bl	8002712 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800155a:	f000 f87d 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	4619      	mov	r1, r3
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <MX_TIM4_Init+0xfc>)
 800156e:	f001 fdf9 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001578:	f000 f86e 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157c:	2360      	movs	r3, #96	; 0x60
 800157e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 199;
 8001580:	23c7      	movs	r3, #199	; 0xc7
 8001582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_TIM4_Init+0xfc>)
 8001594:	f001 f9b8 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800159e:	f000 f85b 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2204      	movs	r2, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <MX_TIM4_Init+0xfc>)
 80015aa:	f001 f9ad 	bl	8002908 <HAL_TIM_PWM_ConfigChannel>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80015b4:	f000 f850 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <MX_TIM4_Init+0xfc>)
 80015ba:	f000 f8b7 	bl	800172c <HAL_TIM_MspPostInit>

}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	; 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000007c 	.word	0x2000007c
 80015cc:	40000800 	.word	0x40000800

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_GPIO_Init+0x80>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <MX_GPIO_Init+0x80>)
 80015ea:	f043 0320 	orr.w	r3, r3, #32
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_GPIO_Init+0x80>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_GPIO_Init+0x80>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_GPIO_Init+0x80>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_GPIO_Init+0x80>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_GPIO_Init+0x80>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <MX_GPIO_Init+0x80>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_GPIO_Init+0x80>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800162c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001630:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_GPIO_Init+0x84>)
 8001642:	f000 fa85 	bl	8001b50 <HAL_GPIO_Init>

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40010800 	.word	0x40010800

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_MspInit+0x5c>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_MspInit+0x5c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_MspInit+0x5c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_MspInit+0x5c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_MspInit+0x60>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_MspInit+0x60>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <HAL_TIM_Base_MspInit+0x58>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d10c      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_TIM_Base_MspInit+0x5c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_TIM_Base_MspInit+0x5c>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_TIM_Base_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016f2:	e010      	b.n	8001716 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_TIM_Base_MspInit+0x60>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10b      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_Base_MspInit+0x5c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_TIM_Base_MspInit+0x5c>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	61d3      	str	r3, [r2, #28]
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_TIM_Base_MspInit+0x5c>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40000400 	.word	0x40000400
 8001724:	40021000 	.word	0x40021000
 8001728:	40000800 	.word	0x40000800

0800172c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <HAL_TIM_MspPostInit+0x94>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d118      	bne.n	800177e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_TIM_MspPostInit+0x98>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_TIM_MspPostInit+0x98>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_TIM_MspPostInit+0x98>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001764:	23c0      	movs	r3, #192	; 0xc0
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2302      	movs	r3, #2
 800176e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4814      	ldr	r0, [pc, #80]	; (80017c8 <HAL_TIM_MspPostInit+0x9c>)
 8001778:	f000 f9ea 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800177c:	e01c      	b.n	80017b8 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_TIM_MspPostInit+0xa0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d117      	bne.n	80017b8 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_TIM_MspPostInit+0x98>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <HAL_TIM_MspPostInit+0x98>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_TIM_MspPostInit+0x98>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a0:	23c0      	movs	r3, #192	; 0xc0
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <HAL_TIM_MspPostInit+0xa4>)
 80017b4:	f000 f9cc 	bl	8001b50 <HAL_GPIO_Init>
}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40000400 	.word	0x40000400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010800 	.word	0x40010800
 80017cc:	40000800 	.word	0x40000800
 80017d0:	40010c00 	.word	0x40010c00

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181a:	f000 f875 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}

08001822 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001830:	f7ff fff7 	bl	8001822 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <LoopFillZerobss+0x16>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800184c:	4c09      	ldr	r4, [pc, #36]	; (8001874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800185a:	f001 fce1 	bl	8003220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185e:	f7ff fd35 	bl	80012cc <main>
  bx lr
 8001862:	4770      	bx	lr
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800186c:	080032bc 	.word	0x080032bc
  ldr r2, =_sbss
 8001870:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001874:	2000011c 	.word	0x2000011c

08001878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC1_2_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_Init+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_Init+0x28>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 f92b 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	200f      	movs	r0, #15
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fee4 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40022000 	.word	0x40022000

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f935 	bl	8001b36 <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f90b 	bl	8001afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000000c 	.word	0x2000000c
 8001900:	20000014 	.word	0x20000014
 8001904:	20000010 	.word	0x20000010

08001908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_IncTick+0x1c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_IncTick+0x20>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a03      	ldr	r2, [pc, #12]	; (8001928 <HAL_IncTick+0x20>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000014 	.word	0x20000014
 8001928:	20000118 	.word	0x20000118

0800192c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <HAL_GetTick+0x10>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000118 	.word	0x20000118

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff fff0 	bl	800192c <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffe0 	bl	800192c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000014 	.word	0x20000014

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff90 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff49 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff5e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff90 	bl	8001a40 <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5f 	bl	80019ec <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffb0 	bl	8001aa4 <SysTick_Config>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b08b      	sub	sp, #44	; 0x2c
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e169      	b.n	8001e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b64:	2201      	movs	r2, #1
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	f040 8158 	bne.w	8001e32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a9a      	ldr	r2, [pc, #616]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d05e      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b8c:	4a98      	ldr	r2, [pc, #608]	; (8001df0 <HAL_GPIO_Init+0x2a0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d875      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b92:	4a98      	ldr	r2, [pc, #608]	; (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d058      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001b98:	4a96      	ldr	r2, [pc, #600]	; (8001df4 <HAL_GPIO_Init+0x2a4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d86f      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001b9e:	4a96      	ldr	r2, [pc, #600]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d052      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001ba4:	4a94      	ldr	r2, [pc, #592]	; (8001df8 <HAL_GPIO_Init+0x2a8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d869      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001baa:	4a94      	ldr	r2, [pc, #592]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d04c      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bb0:	4a92      	ldr	r2, [pc, #584]	; (8001dfc <HAL_GPIO_Init+0x2ac>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d863      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bb6:	4a92      	ldr	r2, [pc, #584]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d046      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
 8001bbc:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <HAL_GPIO_Init+0x2b0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d85d      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bc2:	2b12      	cmp	r3, #18
 8001bc4:	d82a      	bhi.n	8001c1c <HAL_GPIO_Init+0xcc>
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d859      	bhi.n	8001c7e <HAL_GPIO_Init+0x12e>
 8001bca:	a201      	add	r2, pc, #4	; (adr r2, 8001bd0 <HAL_GPIO_Init+0x80>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001c4b 	.word	0x08001c4b
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001c37 	.word	0x08001c37
 8001bdc:	08001c79 	.word	0x08001c79
 8001be0:	08001c7f 	.word	0x08001c7f
 8001be4:	08001c7f 	.word	0x08001c7f
 8001be8:	08001c7f 	.word	0x08001c7f
 8001bec:	08001c7f 	.word	0x08001c7f
 8001bf0:	08001c7f 	.word	0x08001c7f
 8001bf4:	08001c7f 	.word	0x08001c7f
 8001bf8:	08001c7f 	.word	0x08001c7f
 8001bfc:	08001c7f 	.word	0x08001c7f
 8001c00:	08001c7f 	.word	0x08001c7f
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001c7f 	.word	0x08001c7f
 8001c0c:	08001c7f 	.word	0x08001c7f
 8001c10:	08001c7f 	.word	0x08001c7f
 8001c14:	08001c2d 	.word	0x08001c2d
 8001c18:	08001c41 	.word	0x08001c41
 8001c1c:	4a79      	ldr	r2, [pc, #484]	; (8001e04 <HAL_GPIO_Init+0x2b4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c22:	e02c      	b.n	8001c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	623b      	str	r3, [r7, #32]
          break;
 8001c2a:	e029      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	3304      	adds	r3, #4
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e024      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	3308      	adds	r3, #8
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e01f      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	330c      	adds	r3, #12
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e01a      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c52:	2304      	movs	r3, #4
 8001c54:	623b      	str	r3, [r7, #32]
          break;
 8001c56:	e013      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	611a      	str	r2, [r3, #16]
          break;
 8001c6a:	e009      	b.n	8001c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	615a      	str	r2, [r3, #20]
          break;
 8001c76:	e003      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x130>
          break;
 8001c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2bff      	cmp	r3, #255	; 0xff
 8001c84:	d801      	bhi.n	8001c8a <HAL_GPIO_Init+0x13a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_Init+0x13e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2bff      	cmp	r3, #255	; 0xff
 8001c94:	d802      	bhi.n	8001c9c <HAL_GPIO_Init+0x14c>
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x152>
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	3b08      	subs	r3, #8
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	210f      	movs	r1, #15
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	6a39      	ldr	r1, [r7, #32]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80b1 	beq.w	8001e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd0:	4b4d      	ldr	r3, [pc, #308]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	; (8001e08 <HAL_GPIO_Init+0x2b8>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce8:	4a48      	ldr	r2, [pc, #288]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a40      	ldr	r2, [pc, #256]	; (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d013      	beq.n	8001d3c <HAL_GPIO_Init+0x1ec>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3f      	ldr	r2, [pc, #252]	; (8001e14 <HAL_GPIO_Init+0x2c4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1e8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3e      	ldr	r2, [pc, #248]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1e4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a3d      	ldr	r2, [pc, #244]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1e0>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e006      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d30:	2304      	movs	r3, #4
 8001d32:	e004      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_GPIO_Init+0x1ee>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	f002 0203 	and.w	r2, r2, #3
 8001d44:	0092      	lsls	r2, r2, #2
 8001d46:	4093      	lsls	r3, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d4e:	492f      	ldr	r1, [pc, #188]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	492c      	ldr	r1, [pc, #176]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4928      	ldr	r1, [pc, #160]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4922      	ldr	r1, [pc, #136]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	491e      	ldr	r1, [pc, #120]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4918      	ldr	r1, [pc, #96]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4914      	ldr	r1, [pc, #80]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d021      	beq.n	8001e24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	490e      	ldr	r1, [pc, #56]	; (8001e20 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e021      	b.n	8001e32 <HAL_GPIO_Init+0x2e2>
 8001dee:	bf00      	nop
 8001df0:	10320000 	.word	0x10320000
 8001df4:	10310000 	.word	0x10310000
 8001df8:	10220000 	.word	0x10220000
 8001dfc:	10210000 	.word	0x10210000
 8001e00:	10120000 	.word	0x10120000
 8001e04:	10110000 	.word	0x10110000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40010800 	.word	0x40010800
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	40011000 	.word	0x40011000
 8001e1c:	40011400 	.word	0x40011400
 8001e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_GPIO_Init+0x304>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	4909      	ldr	r1, [pc, #36]	; (8001e54 <HAL_GPIO_Init+0x304>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	3301      	adds	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ae8e 	bne.w	8001b64 <HAL_GPIO_Init+0x14>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	372c      	adds	r7, #44	; 0x2c
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e001      	b.n	8001e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	807b      	strh	r3, [r7, #2]
 8001e92:	4613      	mov	r3, r2
 8001e94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e96:	787b      	ldrb	r3, [r7, #1]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9c:	887a      	ldrh	r2, [r7, #2]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ea2:	e003      	b.n	8001eac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	041a      	lsls	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	611a      	str	r2, [r3, #16]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e272      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b92      	ldr	r3, [pc, #584]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e24c      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x76>
 8001f20:	4b80      	ldr	r3, [pc, #512]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7f      	ldr	r2, [pc, #508]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7a      	ldr	r2, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b78      	ldr	r3, [pc, #480]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a77      	ldr	r2, [pc, #476]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xbc>
 8001f5a:	4b72      	ldr	r3, [pc, #456]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a71      	ldr	r2, [pc, #452]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a67      	ldr	r2, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fcca 	bl	800192c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fcc6 	bl	800192c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e200      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe4>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fcb6 	bl	800192c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fcb2 	bl	800192c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1ec      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x10c>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d063      	beq.n	80020ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1c0      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4939      	ldr	r1, [pc, #228]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x270>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fc6b 	bl	800192c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7ff fc67 	bl	800192c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1a1      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4927      	ldr	r1, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x270>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fc4a 	bl	800192c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fc46 	bl	800192c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e180      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03a      	beq.n	800213c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_RCC_OscConfig+0x274>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff fc2a 	bl	800192c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff fc26 	bl	800192c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e160      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f000 fa9c 	bl	8002638 <RCC_Delay>
 8002100:	e01c      	b.n	800213c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_OscConfig+0x274>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7ff fc10 	bl	800192c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210e:	e00f      	b.n	8002130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fc0c 	bl	800192c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d908      	bls.n	8002130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e146      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	42420000 	.word	0x42420000
 800212c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b92      	ldr	r3, [pc, #584]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e9      	bne.n	8002110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a6 	beq.w	8002296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b8b      	ldr	r3, [pc, #556]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a87      	ldr	r2, [pc, #540]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b85      	ldr	r3, [pc, #532]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b82      	ldr	r3, [pc, #520]	; (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b7f      	ldr	r3, [pc, #508]	; (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7e      	ldr	r2, [pc, #504]	; (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7ff fbcd 	bl	800192c <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7ff fbc9 	bl	800192c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	; 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e103      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <HAL_RCC_OscConfig+0x4c8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x312>
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a6e      	ldr	r2, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x334>
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a69      	ldr	r2, [pc, #420]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a66      	ldr	r2, [pc, #408]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x356>
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a60      	ldr	r2, [pc, #384]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	4b5e      	ldr	r3, [pc, #376]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a5d      	ldr	r2, [pc, #372]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 800220e:	4b5b      	ldr	r3, [pc, #364]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a5a      	ldr	r2, [pc, #360]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b58      	ldr	r3, [pc, #352]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a57      	ldr	r2, [pc, #348]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff fb7d 	bl	800192c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fb79 	bl	800192c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0b1      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x37e>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb67 	bl	800192c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff fb63 	bl	800192c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e09b      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b40      	ldr	r3, [pc, #256]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b3c      	ldr	r3, [pc, #240]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a3b      	ldr	r2, [pc, #236]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a0:	4b36      	ldr	r3, [pc, #216]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d061      	beq.n	8002370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d146      	bne.n	8002342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fb37 	bl	800192c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff fb33 	bl	800192c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e06d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e8:	d108      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4921      	ldr	r1, [pc, #132]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a19      	ldr	r1, [r3, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	430b      	orrs	r3, r1
 800230e:	491b      	ldr	r1, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff fb07 	bl	800192c <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff fb03 	bl	800192c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e03d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x46a>
 8002340:	e035      	b.n	80023ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff faf0 	bl	800192c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff faec 	bl	800192c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e026      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x498>
 800236e:	e01e      	b.n	80023ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e019      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
 8002384:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x500>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d0      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4965      	ldr	r1, [pc, #404]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b8      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800243a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	494d      	ldr	r1, [pc, #308]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d040      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e073      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4936      	ldr	r1, [pc, #216]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7ff fa3e 	bl	800192c <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7ff fa3a 	bl	800192c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e053      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d210      	bcs.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4922      	ldr	r1, [pc, #136]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e032      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4916      	ldr	r1, [pc, #88]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254a:	f000 f821 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	490a      	ldr	r1, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1cc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f99c 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	08003290 	.word	0x08003290
 8002588:	2000000c 	.word	0x2000000c
 800258c:	20000010 	.word	0x20000010

08002590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x36>
 80025be:	e027      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	613b      	str	r3, [r7, #16]
      break;
 80025c4:	e027      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0c9b      	lsrs	r3, r3, #18
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0c5b      	lsrs	r3, r3, #17
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e004      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	613b      	str	r3, [r7, #16]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	613b      	str	r3, [r7, #16]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	693b      	ldr	r3, [r7, #16]
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	007a1200 	.word	0x007a1200
 800262c:	080032a0 	.word	0x080032a0
 8002630:	080032b0 	.word	0x080032b0
 8002634:	003d0900 	.word	0x003d0900

08002638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <RCC_Delay+0x34>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <RCC_Delay+0x38>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0a5b      	lsrs	r3, r3, #9
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002654:	bf00      	nop
  }
  while (Delay --);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1e5a      	subs	r2, r3, #1
 800265a:	60fa      	str	r2, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f9      	bne.n	8002654 <RCC_Delay+0x1c>
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	2000000c 	.word	0x2000000c
 8002670:	10624dd3 	.word	0x10624dd3

08002674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e041      	b.n	800270a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff f814 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f000 fab2 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e041      	b.n	80027a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f839 	bl	80027b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	4619      	mov	r1, r3
 8002750:	4610      	mov	r0, r2
 8002752:	f000 fa63 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_TIM_PWM_Start+0x24>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e022      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d109      	bne.n	8002802 <HAL_TIM_PWM_Start+0x3e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e015      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d109      	bne.n	800281c <HAL_TIM_PWM_Start+0x58>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e008      	b.n	800282e <HAL_TIM_PWM_Start+0x6a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e05e      	b.n	80028f4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_TIM_PWM_Start+0x82>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002844:	e013      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d104      	bne.n	8002856 <HAL_TIM_PWM_Start+0x92>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002854:	e00b      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d104      	bne.n	8002866 <HAL_TIM_PWM_Start+0xa2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002864:	e003      	b.n	800286e <HAL_TIM_PWM_Start+0xaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fc50 	bl	800311c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_TIM_PWM_Start+0x138>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d107      	bne.n	8002896 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_TIM_PWM_Start+0x138>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00e      	beq.n	80028be <HAL_TIM_PWM_Start+0xfa>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d009      	beq.n	80028be <HAL_TIM_PWM_Start+0xfa>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_TIM_PWM_Start+0x13c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d004      	beq.n	80028be <HAL_TIM_PWM_Start+0xfa>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_TIM_PWM_Start+0x140>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d111      	bne.n	80028e2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b06      	cmp	r3, #6
 80028ce:	d010      	beq.n	80028f2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e0:	e007      	b.n	80028f2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800

08002908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002922:	2302      	movs	r3, #2
 8002924:	e0ae      	b.n	8002a84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0c      	cmp	r3, #12
 8002932:	f200 809f 	bhi.w	8002a74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002936:	a201      	add	r2, pc, #4	; (adr r2, 800293c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293c:	08002971 	.word	0x08002971
 8002940:	08002a75 	.word	0x08002a75
 8002944:	08002a75 	.word	0x08002a75
 8002948:	08002a75 	.word	0x08002a75
 800294c:	080029b1 	.word	0x080029b1
 8002950:	08002a75 	.word	0x08002a75
 8002954:	08002a75 	.word	0x08002a75
 8002958:	08002a75 	.word	0x08002a75
 800295c:	080029f3 	.word	0x080029f3
 8002960:	08002a75 	.word	0x08002a75
 8002964:	08002a75 	.word	0x08002a75
 8002968:	08002a75 	.word	0x08002a75
 800296c:	08002a33 	.word	0x08002a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 f9b2 	bl	8002ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0208 	orr.w	r2, r2, #8
 800298a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6999      	ldr	r1, [r3, #24]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	619a      	str	r2, [r3, #24]
      break;
 80029ae:	e064      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f9f8 	bl	8002dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6999      	ldr	r1, [r3, #24]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
      break;
 80029f0:	e043      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68b9      	ldr	r1, [r7, #8]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fa41 	bl	8002e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0208 	orr.w	r2, r2, #8
 8002a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0204 	bic.w	r2, r2, #4
 8002a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69d9      	ldr	r1, [r3, #28]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	61da      	str	r2, [r3, #28]
      break;
 8002a30:	e023      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fa8b 	bl	8002f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69d9      	ldr	r1, [r3, #28]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	021a      	lsls	r2, r3, #8
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	61da      	str	r2, [r3, #28]
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
      break;
 8002a78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0b4      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x186>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae0:	d03e      	beq.n	8002b60 <HAL_TIM_ConfigClockSource+0xd4>
 8002ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae6:	f200 8087 	bhi.w	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aee:	f000 8086 	beq.w	8002bfe <HAL_TIM_ConfigClockSource+0x172>
 8002af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af6:	d87f      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b70      	cmp	r3, #112	; 0x70
 8002afa:	d01a      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0xa6>
 8002afc:	2b70      	cmp	r3, #112	; 0x70
 8002afe:	d87b      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b60      	cmp	r3, #96	; 0x60
 8002b02:	d050      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b04:	2b60      	cmp	r3, #96	; 0x60
 8002b06:	d877      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b50      	cmp	r3, #80	; 0x50
 8002b0a:	d03c      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0xfa>
 8002b0c:	2b50      	cmp	r3, #80	; 0x50
 8002b0e:	d873      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d058      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d86f      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b30      	cmp	r3, #48	; 0x30
 8002b1a:	d064      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b1c:	2b30      	cmp	r3, #48	; 0x30
 8002b1e:	d86b      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d060      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d867      	bhi.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05c      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d05a      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b30:	e062      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f000 facc 	bl	80030de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	609a      	str	r2, [r3, #8]
      break;
 8002b5e:	e04f      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6899      	ldr	r1, [r3, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f000 fab5 	bl	80030de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b82:	609a      	str	r2, [r3, #8]
      break;
 8002b84:	e03c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 fa2c 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2150      	movs	r1, #80	; 0x50
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fa83 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e02c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 fa4a 	bl	800304c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2160      	movs	r1, #96	; 0x60
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fa73 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e01c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 fa0c 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2140      	movs	r1, #64	; 0x40
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa63 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002be4:	e00c      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f000 fa5a 	bl	80030aa <TIM_ITRx_SetConfig>
      break;
 8002bf6:	e003      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfc:	e000      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <TIM_Base_SetConfig+0xb8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <TIM_Base_SetConfig+0x30>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d007      	beq.n	8002c4c <TIM_Base_SetConfig+0x30>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <TIM_Base_SetConfig+0xbc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0x30>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <TIM_Base_SetConfig+0xc0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d108      	bne.n	8002c5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <TIM_Base_SetConfig+0xb8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <TIM_Base_SetConfig+0x62>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d007      	beq.n	8002c7e <TIM_Base_SetConfig+0x62>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <TIM_Base_SetConfig+0xbc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_Base_SetConfig+0x62>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <TIM_Base_SetConfig+0xc0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d108      	bne.n	8002c90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <TIM_Base_SetConfig+0xb8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d103      	bne.n	8002cc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	615a      	str	r2, [r3, #20]
}
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800

08002ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 0201 	bic.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f023 0302 	bic.w	r3, r3, #2
 8002d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a1c      	ldr	r2, [pc, #112]	; (8002da8 <TIM_OC1_SetConfig+0xc8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10c      	bne.n	8002d56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0308 	bic.w	r3, r3, #8
 8002d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a13      	ldr	r2, [pc, #76]	; (8002da8 <TIM_OC1_SetConfig+0xc8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d111      	bne.n	8002d82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	621a      	str	r2, [r3, #32]
}
 8002d9c:	bf00      	nop
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00

08002dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f023 0210 	bic.w	r2, r3, #16
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0320 	bic.w	r3, r3, #32
 8002df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <TIM_OC2_SetConfig+0xd0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10d      	bne.n	8002e28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <TIM_OC2_SetConfig+0xd0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d113      	bne.n	8002e58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40012c00 	.word	0x40012c00

08002e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <TIM_OC3_SetConfig+0xd0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10d      	bne.n	8002efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <TIM_OC3_SetConfig+0xd0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d113      	bne.n	8002f2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	621a      	str	r2, [r3, #32]
}
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00

08002f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <TIM_OC4_SetConfig+0x98>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d109      	bne.n	8002fc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	019b      	lsls	r3, r3, #6
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00

08002ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0201 	bic.w	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 030a 	bic.w	r3, r3, #10
 800302c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0210 	bic.w	r2, r3, #16
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	031b      	lsls	r3, r3, #12
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003088:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	621a      	str	r2, [r3, #32]
}
 80030a0:	bf00      	nop
 80030a2:	371c      	adds	r7, #28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b085      	sub	sp, #20
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f043 0307 	orr.w	r3, r3, #7
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	021a      	lsls	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	431a      	orrs	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4313      	orrs	r3, r2
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2201      	movs	r2, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e046      	b.n	800320a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d009      	beq.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a10      	ldr	r2, [pc, #64]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10c      	bne.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2600      	movs	r6, #0
 8003224:	4d0c      	ldr	r5, [pc, #48]	; (8003258 <__libc_init_array+0x38>)
 8003226:	4c0d      	ldr	r4, [pc, #52]	; (800325c <__libc_init_array+0x3c>)
 8003228:	1b64      	subs	r4, r4, r5
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	42a6      	cmp	r6, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	f000 f822 	bl	8003278 <_init>
 8003234:	2600      	movs	r6, #0
 8003236:	4d0a      	ldr	r5, [pc, #40]	; (8003260 <__libc_init_array+0x40>)
 8003238:	4c0a      	ldr	r4, [pc, #40]	; (8003264 <__libc_init_array+0x44>)
 800323a:	1b64      	subs	r4, r4, r5
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	42a6      	cmp	r6, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	f855 3b04 	ldr.w	r3, [r5], #4
 8003248:	4798      	blx	r3
 800324a:	3601      	adds	r6, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003252:	4798      	blx	r3
 8003254:	3601      	adds	r6, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	080032b4 	.word	0x080032b4
 800325c:	080032b4 	.word	0x080032b4
 8003260:	080032b4 	.word	0x080032b4
 8003264:	080032b8 	.word	0x080032b8

08003268 <memset>:
 8003268:	4603      	mov	r3, r0
 800326a:	4402      	add	r2, r0
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <memset+0xa>
 8003270:	4770      	bx	lr
 8003272:	f803 1b01 	strb.w	r1, [r3], #1
 8003276:	e7f9      	b.n	800326c <memset+0x4>

08003278 <_init>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr

08003284 <_fini>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	bf00      	nop
 8003288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328a:	bc08      	pop	{r3}
 800328c:	469e      	mov	lr, r3
 800328e:	4770      	bx	lr
